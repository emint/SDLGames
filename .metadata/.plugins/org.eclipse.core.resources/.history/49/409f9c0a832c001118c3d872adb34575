#include "SDL/SDL.h"
#include "SDL/SDL_image.h"

#include "Display/Window.h"
#include "Display/SurfaceLoader.h"
#include "Display/SurfaceUtils.h"

#include <iostream>
#include <stdlib.h>
#include <cmath>
using namespace std;

/**
 * Application window parameters.
 */
#define APP_WIDTH 512
#define APP_HEIGHT 512
#define APP_BPP 32

/**
 * To define a point on screen
 */
typedef struct {
    double x;
    double y;
    bool active;
} pointT;
/**
 * File names
 */
const string background = "vincent_back.PNG";
const string character = "seph.png";

/**
 * Movement
 */
#define X_MOV 1
#define Y_MOV 1
#define MOV_RIGHT 0
#define MOV_LEFT 1
#define MOV_UP 2
#define MOV_DOWN 3
#define ANI_TIME 10
int last_move = 0;
int cur_move;
bool move_state[4];

/**
 * Char init location
 */
int char_x = 10;
int char_y = 10;

SurfaceLoader surfaceLoader;
SurfaceUtils surfaceUtils;
Window* window;

void picture_display(SDL_Surface* surface) {
  SDL_Surface* bg = NULL;
  bg = IMG_Load(background.c_str());
  if (bg == NULL) {
    cout << "Error loading<" << background << ">.\n";
    return;
  }

  SDL_Surface* to_show = SDL_DisplayFormat(bg);
  SDL_FreeSurface(bg);

  SDL_BlitSurface(to_show, NULL, surface, NULL);

  SDL_Flip(surface);
  SDL_Delay(5000);
}

void display_char(int x, int y, int width, int height,
    SDL_Surface* character_surface, SDL_Surface* screen) {

  SDL_Rect clear_rect;
  clear_rect.x = x - X_MOV;
  clear_rect.y = y - Y_MOV;
  clear_rect.w = width + width / 2;
  clear_rect.h = height + height / 2;
  SDL_FillRect(screen, &clear_rect, 0);
  SDL_Rect sprite_loc;
  sprite_loc.x = 3 * width;
  sprite_loc.y = 15 * height;
  sprite_loc.w = width;
  sprite_loc.h = height;

  SDL_Rect screen_loc;
  screen_loc.x = x;
  screen_loc.y = y;
  SDL_BlitSurface(character_surface, &sprite_loc, screen, &screen_loc);
}

void process_state(int &x, int &y) {
  if (move_state[MOV_UP])
    y -= Y_MOV;
  else if (move_state[MOV_DOWN])
    y += Y_MOV;

  if (move_state[MOV_LEFT])
    x -= X_MOV;
  else if (move_state[MOV_RIGHT])
    x += X_MOV;
}

void animate_char(SDL_Surface* character_surface, SDL_Surface* screen) {
  bool close = false;

  while (!close) {
    SDL_Event event;

    while (SDL_PollEvent(&event)) {
      if (event.type == SDL_QUIT)
        close = true;

      if (event.type == SDL_KEYDOWN) {
        if (event.key.keysym.sym == SDLK_UP)
          move_state[MOV_UP] = true;
        else if (event.key.keysym.sym == SDLK_DOWN)
          move_state[MOV_DOWN] = true;

        if (event.key.keysym.sym == SDLK_RIGHT)
          move_state[MOV_RIGHT] = true;
        else if (event.key.keysym.sym == SDLK_LEFT)
          move_state[MOV_LEFT] = true;
      }
      if (event.type == SDL_KEYUP) {
        if (event.key.keysym.sym == SDLK_UP)
          move_state[MOV_UP] = false;
        else if (event.key.keysym.sym == SDLK_DOWN)
          move_state[MOV_DOWN] = false;

        if (event.key.keysym.sym == SDLK_RIGHT)
          move_state[MOV_RIGHT] = false;
        else if (event.key.keysym.sym == SDLK_LEFT)
          move_state[MOV_LEFT] = false;
      }
    }
    cur_move = SDL_GetTicks();

    if (cur_move - last_move > ANI_TIME) {
      last_move = cur_move;
      process_state(char_x, char_y);
      display_char(char_x, char_y, 16, 16, character_surface, screen);
      SDL_Flip(screen);
    }
  }
}

void move_char(SDL_Surface* surface) {
  SDL_Surface* character_surf = NULL;
  character_surf = IMG_Load(character.c_str());

  if (character_surf == NULL) {
    cout << "Error loading <" << character << ">.\n";
    return;
  }

  SDL_Surface* char_animate = SDL_DisplayFormat(character_surf);
  SDL_FreeSurface(character_surf);

  animate_char(char_animate, surface);
}

int main(int argc, char* args[]) {
  //Start SDL
  if (SDL_Init(SDL_INIT_EVERYTHING) < 0) {
    cout << "Error initializing SDL. " << SDL_GetError();
    return -1;
  }
  int flags = IMG_INIT_JPG | IMG_INIT_PNG;
  int initted=IMG_Init(flags);
  if( (initted & flags != flags)) {
      cout<<"could not init SDL_Image" << endl;
      cout<<"Reason: " << IMG_GetError() << endl;
  }
  window = new Window(&surfaceLoader, &surfaceUtils);

  try {
    Sprite newSprite(&surfaceLoader);
    newSprite.spriteIs(character);

    window->showSprite(40, 40, newSprite);
    int cp = 40;
    SDL_Event event;
    bool close = false;
    Uint32 lastDraw = SDL_GetTicks();
    while (!close) {
      while (SDL_PollEvent(&event)) {
        if (event.type == SDL_QUIT)
          close = true;
      }

      Uint32 cur = SDL_GetTicks();
      if (cur - lastDraw > ANI_TIME) {
        cp += 1;
        lastDraw = cur;
        window->clearRect(cp-1, 40, 16, 16);
        window->showSprite(cp, 40, newSprite);
      }
    }
  } catch (exception e) {
    cout << "Exception found: " << endl;
    cout << e.what() << endl;
  }
  /*
   SDL_Surface* surface = SDL_SetVideoMode(APP_WIDTH, APP_HEIGHT, APP_BPP,
   SDL_HWSURFACE | SDL_DOUBLEBUF);

   if (!surface) {
   cout << "Error initializing main canvas with size " << APP_WIDTH << "x"
   << APP_HEIGHT << ". Error: " << SDL_GetError();
   return -1;
   }
   if(argc < 2)
   return -1;

   if(strcmp(args[1], "move") == 0)
   move_char(surface);

   */
  atexit(SDL_Quit);
  return 0;
}
